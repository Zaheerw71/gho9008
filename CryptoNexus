// CryptoNexus - Advanced Crypto Trading Platform

// Backend: Node.js + Express
// Frontend: React.js
// Database: MongoDB

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const axios = require('axios');
const WebSocket = require('ws');
require('dotenv').config();

const app = express();
app.use(express.json());
app.use(cors());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => console.log('MongoDB Connected'))
  .catch(err => console.log(err));

// CryptoNexus Logo Integration
const logo = 'https://your-logo-url.com/cryptonexus-logo.png';

// Policies
const policies = {
    termsOfService: "By using CryptoNexus, you agree to abide by all trading rules and regulations. Any fraudulent activity will result in account suspension.",
    privacyPolicy: "CryptoNexus respects user privacy and ensures data protection. Personal information will not be shared with third parties without user consent.",
    kycPolicy: "All users must complete KYC verification to access trading features. Verification may take up to 24 hours.",
    securityPolicy: "CryptoNexus implements 2FA, encryption, and fraud detection systems to protect user funds and data.",
    refundPolicy: "All transactions on CryptoNexus are final. Refunds are only issued in case of technical errors or system malfunctions."
};

// User Schema
const UserSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String,
    balance: { type: Number, default: 0 },
    cryptoWallet: { type: Map, of: Number, default: {} },
    kycVerified: { type: Boolean, default: false },
    tradingHistory: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Trade' }],
    rewards: { type: Number, default: 0 },
    achievements: [String],
    vipTier: { type: String, default: 'Bronze' },
    notifications: [String],
    securityAlerts: [String],
    tradingBots: [{ type: String }],
    trustScore: { type: Number, default: 100 },
    investments: [{ crypto: String, amount: Number, date: { type: Date, default: Date.now } }],
    portfolio: { type: Map, of: Number, default: {} },
    languagePreference: { type: String, default: 'English' }
});

const User = mongoose.model('User', UserSchema);

// Trade Schema
const TradeSchema = new mongoose.Schema({
    userId: mongoose.Schema.Types.ObjectId,
    type: String, // 'buy' or 'sell'
    amount: Number,
    price: Number,
    stopLoss: Number,
    takeProfit: Number,
    leverage: Number,
    date: { type: Date, default: Date.now }
});

const Trade = mongoose.model('Trade', TradeSchema);

// Deposit Funds
app.post('/deposit', async (req, res) => {
    const { userId, crypto, amount } = req.body;
    try {
        await User.findByIdAndUpdate(userId, { $inc: { [`cryptoWallet.${crypto}`]: amount } });
        res.json({ message: 'Deposit successful' });
    } catch (error) {
        res.status(500).json({ error: 'Deposit failed' });
    }
});

// Withdraw Funds
app.post('/withdraw', async (req, res) => {
    const { userId, crypto, amount } = req.body;
    try {
        const user = await User.findById(userId);
        if (user.cryptoWallet.get(crypto) >= amount) {
            await User.findByIdAndUpdate(userId, { $inc: { [`cryptoWallet.${crypto}`]: -amount } });
            res.json({ message: 'Withdrawal successful' });
        } else {
            res.status(400).json({ error: 'Insufficient funds' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Withdrawal failed' });
    }
});

// Fetch Market Data from Multiple APIs (Binance, Coinbase, Kraken, KuCoin)
app.get('/market-data', async (req, res) => {
    try {
        const binanceData = await axios.get('https://api.binance.com/api/v3/ticker/price');
        const coinbaseData = await axios.get('https://api.coinbase.com/v2/exchange-rates');
        const krakenData = await axios.get('https://api.kraken.com/0/public/Ticker?pair=BTCUSD');
        const kucoinData = await axios.get('https://api.kucoin.com/api/v1/market/allTickers');
        res.json({ binance: binanceData.data, coinbase: coinbaseData.data, kraken: krakenData.data, kucoin: kucoinData.data });
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch market data' });
    }
});

// AI-Powered Email Marketing System
app.post('/email-marketing', (req, res) => {
    const { email, campaignType } = req.body;
    res.json({ message: `AI Email System: A marketing campaign of type '${campaignType}' has been sent to ${email}.` });
});

// AI Trading Insights
app.get('/ai-trading-insights', (req, res) => {
    res.json({ message: 'AI-driven market analysis and trading suggestions coming soon.' });
});

// Multi-Language Support
app.get('/set-language/:userId/:language', async (req, res) => {
    const { userId, language } = req.params;
    await User.findByIdAndUpdate(userId, { languagePreference: language });
    res.json({ message: `Language set to ${language}` });
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`CryptoNexus server running on port ${PORT}`));
